// @generated by protobuf-ts 2.8.2 with parameter optimize_code_size
// @generated from protobuf file "greeter.proto" (package "greeter", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * The request message containing the user's name.
 *
 * @generated from protobuf message greeter.HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * The response message containing the greetings
 *
 * @generated from protobuf message greeter.HelloReply
 */
export interface HelloReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * The Counter stream reply
 *
 * @generated from protobuf message greeter.CounterStreamReply
 */
export interface CounterStreamReply {
    /**
     * @generated from protobuf field: int32 counter = 1;
     */
    counter: number;
}
/**
 * The Name reply
 *
 * @generated from protobuf message greeter.NamesReply
 */
export interface NamesReply {
    /**
     * @generated from protobuf field: repeated string names = 1;
     */
    names: string[];
}
/**
 * User defined empty parameter
 *
 * @generated from protobuf message greeter.Empty
 */
export interface Empty {
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor() {
        super("greeter.HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message greeter.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloReply$Type extends MessageType<HelloReply> {
    constructor() {
        super("greeter.HelloReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message greeter.HelloReply
 */
export const HelloReply = new HelloReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterStreamReply$Type extends MessageType<CounterStreamReply> {
    constructor() {
        super("greeter.CounterStreamReply", [
            { no: 1, name: "counter", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message greeter.CounterStreamReply
 */
export const CounterStreamReply = new CounterStreamReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NamesReply$Type extends MessageType<NamesReply> {
    constructor() {
        super("greeter.NamesReply", [
            { no: 1, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message greeter.NamesReply
 */
export const NamesReply = new NamesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("greeter.Empty", []);
    }
}
/**
 * @generated MessageType for protobuf message greeter.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service greeter.Greeter
 */
export const Greeter = new ServiceType("greeter.Greeter", [
    { name: "SayHello", options: {}, I: HelloRequest, O: HelloReply },
    { name: "CounterStream", serverStreaming: true, options: {}, I: Empty, O: CounterStreamReply },
    { name: "GetNames", options: {}, I: Empty, O: NamesReply }
]);
