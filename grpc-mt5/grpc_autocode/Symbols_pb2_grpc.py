# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Symbols_pb2 as Symbols__pb2


class SymbolsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSymbolInfos = channel.unary_unary(
                '/metatrader.SymbolsService/GetSymbolInfos',
                request_serializer=Symbols__pb2.GetSymbolInfosReq.SerializeToString,
                response_deserializer=Symbols__pb2.SymbolInfosList.FromString,
                )
        self.GetSymbolTicker = channel.unary_unary(
                '/metatrader.SymbolsService/GetSymbolTicker',
                request_serializer=Symbols__pb2.GetSymbolTickerReq.SerializeToString,
                response_deserializer=Symbols__pb2.SymbolTicker.FromString,
                )


class SymbolsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSymbolInfos(self, request, context):
        """Gets an array of symbol infos.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSymbolTicker(self, request, context):
        """Gets ticker information of a given symbol.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SymbolsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSymbolInfos': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbolInfos,
                    request_deserializer=Symbols__pb2.GetSymbolInfosReq.FromString,
                    response_serializer=Symbols__pb2.SymbolInfosList.SerializeToString,
            ),
            'GetSymbolTicker': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbolTicker,
                    request_deserializer=Symbols__pb2.GetSymbolTickerReq.FromString,
                    response_serializer=Symbols__pb2.SymbolTicker.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metatrader.SymbolsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SymbolsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSymbolInfos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.SymbolsService/GetSymbolInfos',
            Symbols__pb2.GetSymbolInfosReq.SerializeToString,
            Symbols__pb2.SymbolInfosList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSymbolTicker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.SymbolsService/GetSymbolTicker',
            Symbols__pb2.GetSymbolTickerReq.SerializeToString,
            Symbols__pb2.SymbolTicker.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
