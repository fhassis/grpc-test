# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ServerInfo_pb2 as ServerInfo__pb2


class ServerInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerTime = channel.unary_unary(
                '/metatrader.ServerInfo/GetServerTime',
                request_serializer=ServerInfo__pb2.Empty.SerializeToString,
                response_deserializer=ServerInfo__pb2.ServerTimeRes.FromString,
                )
        self.AddToMarketWatch = channel.unary_unary(
                '/metatrader.ServerInfo/AddToMarketWatch',
                request_serializer=ServerInfo__pb2.MarketWatchReq.SerializeToString,
                response_deserializer=ServerInfo__pb2.MarketWatchRes.FromString,
                )
        self.RemoveFromMarketWatch = channel.unary_unary(
                '/metatrader.ServerInfo/RemoveFromMarketWatch',
                request_serializer=ServerInfo__pb2.MarketWatchReq.SerializeToString,
                response_deserializer=ServerInfo__pb2.MarketWatchRes.FromString,
                )
        self.GetMarketWatch = channel.unary_unary(
                '/metatrader.ServerInfo/GetMarketWatch',
                request_serializer=ServerInfo__pb2.Empty.SerializeToString,
                response_deserializer=ServerInfo__pb2.MarketWatchListRes.FromString,
                )


class ServerInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServerTime(self, request, context):
        """Requests the server time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToMarketWatch(self, request, context):
        """Adds a symbol into Market Watch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFromMarketWatch(self, request, context):
        """Removes a symbol from Market Watch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarketWatch(self, request, context):
        """Get Market Watch symbol list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerTime,
                    request_deserializer=ServerInfo__pb2.Empty.FromString,
                    response_serializer=ServerInfo__pb2.ServerTimeRes.SerializeToString,
            ),
            'AddToMarketWatch': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToMarketWatch,
                    request_deserializer=ServerInfo__pb2.MarketWatchReq.FromString,
                    response_serializer=ServerInfo__pb2.MarketWatchRes.SerializeToString,
            ),
            'RemoveFromMarketWatch': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFromMarketWatch,
                    request_deserializer=ServerInfo__pb2.MarketWatchReq.FromString,
                    response_serializer=ServerInfo__pb2.MarketWatchRes.SerializeToString,
            ),
            'GetMarketWatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketWatch,
                    request_deserializer=ServerInfo__pb2.Empty.FromString,
                    response_serializer=ServerInfo__pb2.MarketWatchListRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metatrader.ServerInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServerTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.ServerInfo/GetServerTime',
            ServerInfo__pb2.Empty.SerializeToString,
            ServerInfo__pb2.ServerTimeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToMarketWatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.ServerInfo/AddToMarketWatch',
            ServerInfo__pb2.MarketWatchReq.SerializeToString,
            ServerInfo__pb2.MarketWatchRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFromMarketWatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.ServerInfo/RemoveFromMarketWatch',
            ServerInfo__pb2.MarketWatchReq.SerializeToString,
            ServerInfo__pb2.MarketWatchRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarketWatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metatrader.ServerInfo/GetMarketWatch',
            ServerInfo__pb2.Empty.SerializeToString,
            ServerInfo__pb2.MarketWatchListRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
