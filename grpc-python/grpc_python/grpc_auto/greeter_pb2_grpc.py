# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greeter_pb2 as greeter__pb2


class GreeterStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/greeter.Greeter/SayHello',
                request_serializer=greeter__pb2.HelloRequest.SerializeToString,
                response_deserializer=greeter__pb2.HelloReply.FromString,
                )
        self.CounterStream = channel.unary_stream(
                '/greeter.Greeter/CounterStream',
                request_serializer=greeter__pb2.Empty.SerializeToString,
                response_deserializer=greeter__pb2.CounterStreamReply.FromString,
                )
        self.GetNames = channel.unary_unary(
                '/greeter.Greeter/GetNames',
                request_serializer=greeter__pb2.Empty.SerializeToString,
                response_deserializer=greeter__pb2.NamesReply.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    """

    def SayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CounterStream(self, request, context):
        """Sends a counter every second
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNames(self, request, context):
        """Sends a list of names
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=greeter__pb2.HelloRequest.FromString,
                    response_serializer=greeter__pb2.HelloReply.SerializeToString,
            ),
            'CounterStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CounterStream,
                    request_deserializer=greeter__pb2.Empty.FromString,
                    response_serializer=greeter__pb2.CounterStreamReply.SerializeToString,
            ),
            'GetNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNames,
                    request_deserializer=greeter__pb2.Empty.FromString,
                    response_serializer=greeter__pb2.NamesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greeter.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greeter.Greeter/SayHello',
            greeter__pb2.HelloRequest.SerializeToString,
            greeter__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CounterStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/greeter.Greeter/CounterStream',
            greeter__pb2.Empty.SerializeToString,
            greeter__pb2.CounterStreamReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greeter.Greeter/GetNames',
            greeter__pb2.Empty.SerializeToString,
            greeter__pb2.NamesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
